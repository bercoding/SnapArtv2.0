import UIKit
import Foundation
import MediaPipeTasksVision

/**
 * FilterManager - L·ªõp qu·∫£n l√Ω filter duy nh·∫•t trong ·ª©ng d·ª•ng
 * Qu·∫£n l√Ω vi·ªác l·ª±a ch·ªçn filter v√† √°p d·ª•ng filter l√™n h√¨nh ·∫£nh
 */
class FilterManager {
    // Singleton instance
    static let shared = FilterManager()
    
    // Filter hi·ªán t·∫°i ƒëang √°p d·ª•ng
    private(set) var currentFilter: FilterType?
    
    // Danh s√°ch c√°c filter c√≥ s·∫µn
    private(set) var availableFilters: [FilterType] = [
        .dogFace, .glasses, .mustache, .hat, .beauty,
        .funnyBigEyes, .funnyTinyNose, .funnyWideMouth,
        .funnyPuffyCheeks, .funnySwirl, .funnyLongChin, .funnyMegaFace, .funnyAlienHead, .funnyWarp,
        .xmasWarm, .xmasSanta
    ]

    
    // C√°c ·∫£nh filter ƒë√£ ƒë∆∞·ª£c load
    private var filterImages: [FilterType: UIImage] = [:]
    
    // Lock ƒë·ªÉ b·∫£o v·ªá truy c·∫≠p ƒë·ªìng th·ªùi
    private let filterLock = NSLock()
    
    private init() {
        loadFilterImages()
    }
    
    // Load t·∫•t c·∫£ ·∫£nh filter
    private func loadFilterImages() {
        for filterType in availableFilters {
            let name = filterType.imageName
            if name.isEmpty { continue } // b·ªè qua filter bi·∫øn d·∫°ng kh√¥ng d√πng ·∫£nh
            if let image = UIImage(named: name) {
                filterImages[filterType] = image
            } else {
                print("‚ö†Ô∏è Filter image not found: \(name)")
            }
        }
    }
    
    // Thi·∫øt l·∫≠p filter hi·ªán t·∫°i
    func setFilter(_ filter: FilterType?) {
        filterLock.lock()
        defer { filterLock.unlock() }
        
        currentFilter = filter
        print("üé≠ Filter set: \(filter?.displayName ?? "None")")
    }
    
    // L·∫•y danh s√°ch t·∫•t c·∫£ filter
    func getAllFilters() -> [FilterType] {
        return availableFilters
    }
    
    // L·∫•y filter hi·ªán t·∫°i
    func getCurrentFilter() -> FilterType? {
        return currentFilter
    }
    
    // Ki·ªÉm tra xem filter c√≥ s·∫µn hay kh√¥ng
    func isFilterAvailable(_ filter: FilterType) -> Bool {
        return UIImage(named: filter.imageName) != nil
    }
    
    // √Åp d·ª•ng filter l√™n h√¨nh ·∫£nh - phi√™n b·∫£n ƒë∆°n gi·∫£n h√≥a kh√¥ng s·ª≠ d·ª•ng landmarks
    func applyFilter(to image: UIImage, with landmarks: Any? = nil) -> UIImage {
        guard let filter = currentFilter else {
            return image
        }
        
        // N·∫øu c√≥ landmarks v√† ƒë√∫ng ki·ªÉu, s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ƒë·ªông
        if let faceLandmarks = landmarks as? FaceLandmarkerResult,
           !faceLandmarks.faceLandmarks.isEmpty {
            if let filteredImage = applyDynamicFilter(to: image, with: faceLandmarks, type: filter) {
                return filteredImage
            }
        }
        
        // Fallback to static filter if landmarks not available or dynamic filter failed
        return applyStaticFilter(to: image, type: filter)
    }
    
    // √Åp d·ª•ng filter tƒ©nh (ƒë·∫∑t ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh)
    func applyStaticFilter(to image: UIImage, type: FilterType) -> UIImage {
        if let filteredImage = applyStaticFilter(to: image, type: type, viewSize: image.size) {
            return filteredImage
        }
        return image
    }
    
    // √Åp d·ª•ng filter tƒ©nh v·ªõi k√≠ch th∆∞·ªõc view t√πy ch·ªânh
    func applyStaticFilter(to image: UIImage, type: FilterType, viewSize: CGSize) -> UIImage? {
        guard let filterImage = filterImages[type] else {
            return image
        }
        
        // T·∫°o context ƒë·ªÉ v·∫Ω
        UIGraphicsBeginImageContextWithOptions(viewSize, false, 0.0)
        defer { UIGraphicsEndImageContext() }
        
        // V·∫Ω ·∫£nh g·ªëc n·∫øu c·∫ßn
        if image.size.width > 1 && image.size.height > 1 {
            image.draw(at: .zero)
        }
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ filter t√πy theo lo·∫°i
        var filterRect = CGRect.zero
        
        switch type {
        case .dogFace:
            // V·ªã tr√≠ m·∫∑t ch√≥ - ph√≠a tr√™n gi·ªØa
            let width = viewSize.width * 0.7
            let height = width * 0.8
            let x = (viewSize.width - width) / 2
            let y = viewSize.height * 0.1
            filterRect = CGRect(x: x, y: y, width: width, height: height)
            
        case .glasses:
            // V·ªã tr√≠ k√≠nh - gi·ªØa tr√™n
            let width = viewSize.width * 0.8
            let height = width * 0.4
            let x = (viewSize.width - width) / 2
            let y = viewSize.height * 0.33
            filterRect = CGRect(x: x, y: y, width: width, height: height)
            
        case .mustache:
            // V·ªã tr√≠ r√¢u - gi·ªØa d∆∞·ªõi
            let width = viewSize.width * 0.5
            let height = width * 0.3
            let x = (viewSize.width - width) / 2
            let y = viewSize.height * 0.55
            filterRect = CGRect(x: x, y: y, width: width, height: height)
            
        case .hat:
            // V·ªã tr√≠ m≈© - tr√™n ƒë·ªânh ƒë·∫ßu
            let width = viewSize.width * 0.8
            let height = width * 0.6
            let x = (viewSize.width - width) / 2
            let y = viewSize.height * 0.05
            filterRect = CGRect(x: x, y: y, width: width, height: height)
        
        case .xmasSanta:
            // Kh√¥ng v·∫Ω static (c·∫ßn landmarks cho m≈© + r√¢u)
            return image
        case .xmasBeard:
            // Kh√¥ng v·∫Ω static (c·∫ßn landmarks)
            return image
        case .beauty, .funnyBigEyes, .funnyTinyNose, .funnyWideMouth, .funnyPuffyCheeks, .funnySwirl, .funnyLongChin, .funnyMegaFace, .funnyAlienHead, .funnyWarp, .xmasWarm:
            // Filter beauty/bi·∫øn d·∫°ng, kh√¥ng d√πng overlay ·∫£nh
            return image
        case .none:
            return image
        }
        
        // V·∫Ω filter
        filterImage.draw(in: filterRect)
        
        // L·∫•y ·∫£nh k·∫øt qu·∫£
        return UIGraphicsGetImageFromCurrentImageContext()
    }
    
    // √Åp d·ª•ng filter ƒë·ªông d·ª±a tr√™n landmarks
    func applyDynamicFilter(to image: UIImage, with landmarks: FaceLandmarkerResult, type: FilterType, isFrontCamera: Bool = false) -> UIImage? {
        guard !landmarks.faceLandmarks.isEmpty, 
              let firstFace = landmarks.faceLandmarks.first,
              let filterImage = filterImages[type] else {
            return nil
        }
        
        // T·∫°o context ƒë·ªÉ v·∫Ω
        UIGraphicsBeginImageContextWithOptions(image.size, false, UIScreen.main.scale)
        defer { UIGraphicsEndImageContext() }
        
        // V·∫Ω ·∫£nh g·ªëc
        image.draw(at: .zero)
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ filter d·ª±a tr√™n landmarks
        var filterRect = CGRect.zero
        
        switch type {
        case .dogFace:
            // T√≠nh to√°n h√¨nh ch·ªØ nh·∫≠t bao quanh khu√¥n m·∫∑t
            if let faceRect = getFaceRect(from: firstFace, in: image.size, isFrontCamera: isFrontCamera) {
                let width = faceRect.width * 1.5
                let height = width * 0.8
                filterRect = CGRect(
                    x: faceRect.midX - width/2,
                    y: faceRect.minY - height * 0.2,
                    width: width,
                    height: height
                )
                print("üê∂ Dog face filter rect: \(filterRect)")
            }
            
        case .glasses:
            // S·ª≠ d·ª•ng c√°c ƒëi·ªÉm landmarks m·∫Øt
            if firstFace.count >= 468 {
                let leftEyeIdx = 33  // ƒêi·ªÉm ngo√†i c√πng b√™n tr√°i c·ªßa m·∫Øt tr√°i
                let rightEyeIdx = 263 // ƒêi·ªÉm ngo√†i c√πng b√™n ph·∫£i c·ªßa m·∫Øt ph·∫£i
                let leftEyeBottomIdx = 145  // ƒêi·ªÉm d∆∞·ªõi c·ªßa m·∫Øt tr√°i
                let rightEyeBottomIdx = 374 // ƒêi·ªÉm d∆∞·ªõi c·ªßa m·∫Øt ph·∫£i
                
                let leftEye = convertLandmarkToPoint(firstFace[leftEyeIdx], in: image.size, isFrontCamera: isFrontCamera)
                let rightEye = convertLandmarkToPoint(firstFace[rightEyeIdx], in: image.size, isFrontCamera: isFrontCamera)
                let leftEyeBottom = convertLandmarkToPoint(firstFace[leftEyeBottomIdx], in: image.size, isFrontCamera: isFrontCamera)
                let rightEyeBottom = convertLandmarkToPoint(firstFace[rightEyeBottomIdx], in: image.size, isFrontCamera: isFrontCamera)
                
                let eyeDistance = distance(from: leftEye, to: rightEye)
                let width = eyeDistance * 2.2
                let height = width * 0.5
                
                // V·ªã tr√≠ Y d·ª±a tr√™n ƒëi·ªÉm d∆∞·ªõi m·∫Øt
                let yPosition = (leftEyeBottom.y + rightEyeBottom.y) / 2
                
                filterRect = CGRect(
                    x: (leftEye.x + rightEye.x)/2 - width/2,
                    y: yPosition - height * 0.35,
                    width: width,
                    height: height
                )
                print("üëì Glasses filter rect: \(filterRect), eye distance: \(eyeDistance)")
            }
            
        case .mustache:
            // S·ª≠ d·ª•ng c√°c ƒëi·ªÉm landmarks mi·ªáng v√† m≈©i
            if firstFace.count >= 468 {
                let noseBottomIdx = 2   // ƒêi·ªÉm d∆∞·ªõi m≈©i (∆∞·ªõc l∆∞·ª£ng)
                let mouthTopIdx = 0     // ƒêi·ªÉm gi·ªØa tr√™n c·ªßa mi·ªáng
                let leftMouthIdx = 61   // ƒêi·ªÉm tr√°i c·ªßa mi·ªáng
                let rightMouthIdx = 291 // ƒêi·ªÉm ph·∫£i c·ªßa mi·ªáng
                
                let noseBottom = convertLandmarkToPoint(firstFace[noseBottomIdx], in: image.size, isFrontCamera: isFrontCamera)
                let mouthTop = convertLandmarkToPoint(firstFace[mouthTopIdx], in: image.size, isFrontCamera: isFrontCamera)
                let leftMouth = convertLandmarkToPoint(firstFace[leftMouthIdx], in: image.size, isFrontCamera: isFrontCamera)
                let rightMouth = convertLandmarkToPoint(firstFace[rightMouthIdx], in: image.size, isFrontCamera: isFrontCamera)
                
                let mouthWidth = distance(from: leftMouth, to: rightMouth)
                let width = mouthWidth * 1.5
                let height = width * 0.35
                let centerX = (leftMouth.x + rightMouth.x) / 2
                
                // ƒê·∫∑t theo t√¢m r√¢u ƒë·ªÉ ·ªïn ƒë·ªãnh gi·ªØa live v√† ·∫£nh: n·ªôi suy gi·ªØa m√¥i tr√™n v√† ƒë√°y m≈©i
                let lipToNose = max(noseBottom.y - mouthTop.y, 0)
                let centerY = mouthTop.y + lipToNose * 0.42
                
                filterRect = CGRect(
                    x: centerX - width/2,
                    y: centerY - height/2,
                    width: width,
                    height: height
                )
                print("üë® Mustache filter rect: \(filterRect), mouth width: \(mouthWidth)")
            } else {
                print("‚ö†Ô∏è firstFace.count < 468: \(firstFace.count)")
            }
            
        case .hat:
            // S·ª≠ d·ª•ng c√°c landmark c·ª• th·ªÉ cho m≈©
            if firstFace.count >= 468 {
                let topHeadIdx = 10    // ƒêi·ªÉm ƒë·ªânh ƒë·∫ßu
                let foreheadIdx = 151  // ƒêi·ªÉm gi·ªØa tr√°n
                
                let topHead = convertLandmarkToPoint(firstFace[topHeadIdx], in: image.size, isFrontCamera: isFrontCamera)
                let forehead = convertLandmarkToPoint(firstFace[foreheadIdx], in: image.size, isFrontCamera: isFrontCamera)
                
                // T√≠nh to√°n k√≠ch th∆∞·ªõc khu√¥n m·∫∑t ƒë·ªÉ x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc m≈©
                if let faceRect = getFaceRect(from: firstFace, in: image.size, isFrontCamera: isFrontCamera) {
                    let faceWidth = faceRect.width
                    
                    // T√≠nh to√°n chi·ªÅu cao ƒë·∫ßu
                    _ = distance(from: topHead, to: forehead)
                    
                    let width = faceWidth * 1.8
                    let height = width * 0.8
                    
                    filterRect = CGRect(
                        x: topHead.x - width/2,
                        y: topHead.y - height * 0.7, // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ m≈© l√™n cao h∆°n
                        width: width,
                        height: height
                    )
                    print("üé© Hat filter rect: \(filterRect)")
                }
            }
        
        case .xmasSanta:
            if firstFace.count >= 468,
               let faceRect = getFaceRect(from: firstFace, in: image.size, isFrontCamera: isFrontCamera) {
                // 1) M≈© Noel (d·ª±a v√†o 159/386)
                if let santaHat = UIImage(named: FilterType.xmasSanta.imageName) {
                    let leftBrow = convertLandmarkToPoint(firstFace[159], in: image.size, isFrontCamera: isFrontCamera)
                    let rightBrow = convertLandmarkToPoint(firstFace[386], in: image.size, isFrontCamera: isFrontCamera)
                    let browCenter = CGPoint(x: (leftBrow.x + rightBrow.x)/2.0, y: (leftBrow.y + rightBrow.y)/2.0)
                    let hatWidth = faceRect.width * 1.9
                    let hatAspect = santaHat.size.height / max(1, santaHat.size.width)
                    let hatHeight = hatWidth * hatAspect
                    let hatTopY = browCenter.y - hatHeight
                    santaHat.draw(in: CGRect(x: faceRect.midX - hatWidth/2, y: hatTopY, width: hatWidth, height: hatHeight))
                }
                // 2) R√¢u Noel (midpoint m√¥i tr√™n‚Äìc·∫±m)
                if let beard = UIImage(named: "filter_chrismas_beard") {
                    let upperLip = convertLandmarkToPoint(firstFace[0], in: image.size, isFrontCamera: isFrontCamera)
                    let chin = convertLandmarkToPoint(firstFace[152], in: image.size, isFrontCamera: isFrontCamera)
                    let center = CGPoint(x: (upperLip.x + chin.x)/2.0, y: (upperLip.y + chin.y)/2.0)
                    let lipToChin = distance(from: upperLip, to: chin)
                    let beardHeight = lipToChin * 1.2
                    let beardWidth = max(faceRect.width * 1.7, beardHeight) // gi·ªØ t·ªâ l·ªá r·ªông
                    let beardAspect = beard.size.height / max(1, beard.size.width)
                    let finalBeardHeight = beardWidth * beardAspect
                    let beardRect = CGRect(x: center.x - beardWidth/2,
                                           y: center.y - finalBeardHeight/2,
                                           width: beardWidth,
                                           height: finalBeardHeight)
                    beard.draw(in: beardRect)
                }
                return UIGraphicsGetImageFromCurrentImageContext()
            }
        case .xmasBeard:
            // Kh√¥ng x·ª≠ l√Ω trong h√†m n√†y (ƒë√£ c√≥ overlay/live path); gi·ªØ nguy√™n ·∫£nh
            return image
        
        case .beauty, .funnyBigEyes, .funnyTinyNose, .funnyWideMouth, .funnyPuffyCheeks, .funnySwirl, .funnyLongChin, .funnyMegaFace, .funnyAlienHead, .funnyWarp, .xmasWarm:
            // Filter bi·∫øn d·∫°ng, kh√¥ng v·∫Ω overlay ·∫£nh ·ªü pipeline n√†y
            return image
        case .none:
            return image
        }
        
        // V·∫Ω filter n·∫øu c√≥ v·ªã tr√≠ h·ª£p l·ªá
        if filterRect.width > 0 && filterRect.height > 0 {
            filterImage.draw(in: filterRect)
            return UIGraphicsGetImageFromCurrentImageContext()
        } else {
            print("‚ö†Ô∏è Could not calculate filter position")
            return image
        }
    }
    
    // Helper method ƒë·ªÉ chuy·ªÉn ƒë·ªïi landmark th√†nh ƒëi·ªÉm CGPoint
    private func convertLandmarkToPoint(_ landmark: NormalizedLandmark, in viewSize: CGSize, isFrontCamera: Bool = false) -> CGPoint {
        // ƒê·∫£m b·∫£o ƒëi·ªÉm n·∫±m trong kho·∫£ng [0, 1]
        let x = min(max(CGFloat(landmark.x), 0), 1)
        let y = min(max(CGFloat(landmark.y), 0), 1)
        
        // X·ª≠ l√Ω t·ªça ƒë·ªô d·ª±a v√†o camera
        var pointX = x
        
        // ƒê·ªëi v·ªõi camera tr∆∞·ªõc, c·∫ßn ph·∫£n chi·∫øu t·ªça ƒë·ªô x
        if isFrontCamera {
            pointX = 1 - x
        }
        
        // Quy ƒë·ªïi t·ªça ƒë·ªô normalized [0-1] th√†nh t·ªça ƒë·ªô ƒëi·ªÉm ·∫£nh th·ª±c t·∫ø
        // ƒê·ªëi v·ªõi camera tr∆∞·ªõc, c·∫ßn ƒëi·ªÅu ch·ªânh t·ªâ l·ªá v√† v·ªã tr√≠
        let finalX = pointX * viewSize.width
        
        // ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô Y ƒë·ªÉ ph√π h·ª£p v·ªõi t·ªâ l·ªá khung h√¨nh
        // MediaPipe tr·∫£ v·ªÅ t·ªça ƒë·ªô Y t·ª´ tr√™n xu·ªëng d∆∞·ªõi, UIKit c≈©ng v·∫≠y
        let finalY = y * viewSize.height
        
        // Debug log
        print("üîç Converting landmark (\(x), \(y)) to point (\(finalX), \(finalY)) with isFrontCamera=\(isFrontCamera)")
        
        return CGPoint(x: finalX, y: finalY)
    }
    
    // Helper method ƒë·ªÉ t√≠nh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm
    private func distance(from point1: CGPoint, to point2: CGPoint) -> CGFloat {
        return sqrt(pow(point2.x - point1.x, 2) + pow(point2.y - point1.y, 2))
    }
    
    // Helper method ƒë·ªÉ t√≠nh rectangle bao quanh khu√¥n m·∫∑t
    private func getFaceRect(from landmarks: [NormalizedLandmark], in viewSize: CGSize, isFrontCamera: Bool = false) -> CGRect? {
        guard !landmarks.isEmpty else { return nil }
        
        // T√¨m gi√° tr·ªã min/max cho c√°c ƒëi·ªÉm landmark
        var minX: CGFloat = 1.0
        var minY: CGFloat = 1.0
        var maxX: CGFloat = 0.0
        var maxY: CGFloat = 0.0
        
        for landmark in landmarks {
            let x = CGFloat(landmark.x)
            let y = CGFloat(landmark.y)
            
            minX = min(minX, x)
            minY = min(minY, y)
            maxX = max(maxX, x)
            maxY = max(maxY, y)
        }
        
        // X·ª≠ l√Ω ph·∫£n chi·∫øu cho camera tr∆∞·ªõc
        var left = minX
        var right = maxX
        
        if isFrontCamera {
            left = 1 - maxX
            right = 1 - minX
        }
        
        // Chuy·ªÉn ƒë·ªïi sang t·ªça ƒë·ªô view
        let viewLeft = left * viewSize.width
        let viewTop = minY * viewSize.height
        let viewWidth = (right - left) * viewSize.width
        let viewHeight = (maxY - minY) * viewSize.height
        
        let rect = CGRect(x: viewLeft, y: viewTop, width: viewWidth, height: viewHeight)
        print("üìê Face rect: \(rect) (isFrontCamera=\(isFrontCamera))")
        
        return rect
    }
    
    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t filter overlay v·ªõi t·ªâ l·ªá khung h√¨nh ch√≠nh x√°c
    func updateFilterOverlayWithCorrectAspectRatio(_ filterOverlay: UIImageView, with landmarksResult: FaceLandmarkerResult?, viewSize: CGSize, frameSize: CGSize, isFrontCamera: Bool = false) {
        // ƒê·∫£m b·∫£o lu√¥n ch·∫°y tr√™n main thread ƒë·ªÉ d√πng UIGraphics an to√†n
        if !Thread.isMainThread {
            DispatchQueue.main.async { [weak self] in
                guard let self = self else { return }
                self.updateFilterOverlayWithCorrectAspectRatio(filterOverlay, with: landmarksResult, viewSize: viewSize, frameSize: frameSize, isFrontCamera: isFrontCamera)
            }
            return
        }
        guard let filterType = currentFilter else {
            filterOverlay.image = nil
            return
        }
        print("üß© updateOverlay: type=\(filterType.displayName) front=\(isFrontCamera) view=\(viewSize) frame=\(frameSize) hasLandmarks=\(!(landmarksResult?.faceLandmarks.isEmpty ?? true))")
        
        // T·∫°o context ƒë·ªÉ v·∫Ω
        UIGraphicsBeginImageContextWithOptions(viewSize, false, UIScreen.main.scale)
        defer { UIGraphicsEndImageContext() }
        
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: √îng gi√† Noel (m≈© + r√¢u) t·ª± v·∫Ω, kh√¥ng ph·ª• thu·ªôc filterImage chung
        if filterType == .xmasSanta {
            if let landmarks = landmarksResult, let firstFace = landmarks.faceLandmarks.first {
                let faceRect: CGRect? = { () -> CGRect? in
                    // Map nhanh face rect t·ª´ landmarks ƒë√£ chu·∫©n h√≥a
                    var minX: CGFloat = 1, minY: CGFloat = 1, maxX: CGFloat = 0, maxY: CGFloat = 0
                    for lm in firstFace { minX = min(minX, CGFloat(lm.x)); minY = min(minY, CGFloat(lm.y)); maxX = max(maxX, CGFloat(lm.x)); maxY = max(maxY, CGFloat(lm.y)) }
                    var left = minX, right = maxX
                    if isFrontCamera { left = 1 - maxX; right = 1 - minX }
                    let scale = max(viewSize.width / frameSize.width, viewSize.height / frameSize.height)
                    let scaledSize = CGSize(width: frameSize.width * scale, height: frameSize.height * scale)
                    let offsetX = (viewSize.width - scaledSize.width) / 2.0
                    let offsetY = (viewSize.height - scaledSize.height) / 2.0
                    let leftFrame = left * frameSize.width
                    let topFrame = minY * frameSize.height
                    let widthFrame = (right - left) * frameSize.width
                    let heightFrame = (maxY - minY) * frameSize.height
                    return CGRect(x: leftFrame * scale + offsetX,
                                  y: topFrame * scale + offsetY,
                                  width: widthFrame * scale,
                                  height: heightFrame * scale)
                }()
                if let faceRectUnwrapped = faceRect {
                    func mapPoint(_ lm: NormalizedLandmark) -> CGPoint {
                        let scale = max(viewSize.width / frameSize.width, viewSize.height / frameSize.height)
                        let scaledSize = CGSize(width: frameSize.width * scale, height: frameSize.height * scale)
                        let offsetX = (viewSize.width - scaledSize.width) / 2.0
                        let offsetY = (viewSize.height - scaledSize.height) / 2.0
                        let xNorm0 = CGFloat(lm.x)
                        let xNorm = isFrontCamera ? (1 - xNorm0) : xNorm0
                        let yNorm = CGFloat(lm.y)
                        let xFrame = xNorm * frameSize.width
                        let yFrame = yNorm * frameSize.height
                        return CGPoint(x: xFrame * scale + offsetX, y: yFrame * scale + offsetY)
                    }
                    // V·∫Ω m≈© (ch·ªâ khi ƒë·ªß landmarks)
                    if let santaHat = UIImage(named: FilterType.xmasSanta.imageName), firstFace.count > 386 {
                        let leftBrow = mapPoint(firstFace[159])
                        let rightBrow = mapPoint(firstFace[386])
                        let browCenter = CGPoint(x: (leftBrow.x + rightBrow.x)/2.0, y: (leftBrow.y + rightBrow.y)/2.0)
                        let hatWidth = faceRectUnwrapped.width * 1.9
                        let hatAspect = santaHat.size.height / max(1, santaHat.size.width)
                        let hatHeight = hatWidth * hatAspect
                        let hatTopY = browCenter.y - hatHeight
                        santaHat.draw(in: CGRect(x: faceRectUnwrapped.midX - hatWidth/2, y: hatTopY, width: hatWidth, height: hatHeight))
                    }
                    // V·∫Ω r√¢u (ch·ªâ khi ƒë·ªß landmarks)
                    if let beard = UIImage(named: "filter_chrismas_beard"), firstFace.count > 152 {
                        let upperLip = mapPoint(firstFace[0])
                        let chin = mapPoint(firstFace[152])
                        let center = CGPoint(x: (upperLip.x + chin.x)/2.0, y: (upperLip.y + chin.y)/2.0)
                        let beardAspect = beard.size.height / max(1, beard.size.width)
                        let beardWidth = faceRectUnwrapped.width * 1.25
                        let finalBeardHeight = beardWidth * beardAspect
                        let offsetDown = faceRectUnwrapped.height * 0.10
                        let rect = CGRect(x: center.x - beardWidth/2, y: center.y - finalBeardHeight/2 + offsetDown, width: beardWidth, height: finalBeardHeight)
                        beard.draw(in: rect)
                    }
                    filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                    filterOverlay.isHidden = false
                    print("‚úÖ Applied Santa overlay (early path)")
                    return
                } else {
            filterOverlay.image = nil
            return
        }
            }
        }
        
        // Early path cho c√°c overlay c∆° b·∫£n: glasses, mustache, hat, dogFace
        if let landmarks = landmarksResult, let firstFace = landmarks.faceLandmarks.first,
           [.glasses, .mustache, .hat, .dogFace].contains(filterType) {
            func mapPoint(_ lm: NormalizedLandmark) -> CGPoint {
                let scale = max(viewSize.width / frameSize.width, viewSize.height / frameSize.height)
                let scaledSize = CGSize(width: frameSize.width * scale, height: frameSize.height * scale)
                let offsetX = (viewSize.width - scaledSize.width) / 2.0
                let offsetY = (viewSize.height - scaledSize.height) / 2.0
                let xNorm0 = CGFloat(lm.x)
                let xNorm = isFrontCamera ? (1 - xNorm0) : xNorm0
                let yNorm = CGFloat(lm.y)
                let xFrame = xNorm * frameSize.width
                let yFrame = yNorm * frameSize.height
                return CGPoint(x: xFrame * scale + offsetX, y: yFrame * scale + offsetY)
            }
            func faceRectFromLandmarks(_ points: [NormalizedLandmark]) -> CGRect? {
                var minX: CGFloat = 1, minY: CGFloat = 1, maxX: CGFloat = 0, maxY: CGFloat = 0
                for lm in points { minX = min(minX, CGFloat(lm.x)); minY = min(minY, CGFloat(lm.y)); maxX = max(maxX, CGFloat(lm.x)); maxY = max(maxY, CGFloat(lm.y)) }
                var left = minX, right = maxX
                if isFrontCamera { left = 1 - maxX; right = 1 - minX }
                let scale = max(viewSize.width / frameSize.width, viewSize.height / frameSize.height)
                let scaledSize = CGSize(width: frameSize.width * scale, height: frameSize.height * scale)
                let offsetX = (viewSize.width - scaledSize.width) / 2.0
                let offsetY = (viewSize.height - scaledSize.height) / 2.0
                let leftFrame = left * frameSize.width
                let topFrame = minY * frameSize.height
                let widthFrame = (right - left) * frameSize.width
                let heightFrame = (maxY - minY) * frameSize.height
                return CGRect(x: leftFrame * scale + offsetX,
                              y: topFrame * scale + offsetY,
                              width: widthFrame * scale,
                              height: heightFrame * scale)
            }
            switch filterType {
            case .glasses:
                guard let overlay = UIImage(named: FilterType.glasses.imageName) else { print("‚ö†Ô∏è Missing image for glasses (early path)"); break }
                if firstFace.count >= 468 {
                    let leftEye = mapPoint(firstFace[33])
                    let rightEye = mapPoint(firstFace[263])
                    let leftEyeBottom = mapPoint(firstFace[145])
                    let rightEyeBottom = mapPoint(firstFace[374])
                    let eyeDistance = distance(from: leftEye, to: rightEye)
                    let width = eyeDistance * 2.2
                    let height = width * 0.5
                    let yPosition = (leftEyeBottom.y + rightEyeBottom.y) / 2
                    let rect = CGRect(x: (leftEye.x + rightEye.x)/2 - width/2,
                                      y: yPosition - height * 0.35,
                                      width: width,
                                      height: height)
                    overlay.draw(in: rect)
                    print("‚úÖ Applied glasses (early) at: \(rect)")
                    filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                    filterOverlay.isHidden = false
                    return
                }
            case .mustache:
                guard let overlay = UIImage(named: FilterType.mustache.imageName) else { print("‚ö†Ô∏è Missing image for mustache (early path)"); break }
                if firstFace.count >= 468 {
                    let noseBottom = mapPoint(firstFace[2])
                    let mouthTop = mapPoint(firstFace[0])
                    let leftMouth = mapPoint(firstFace[61])
                    let rightMouth = mapPoint(firstFace[291])
                    let mouthWidth = distance(from: leftMouth, to: rightMouth)
                    let width = mouthWidth * 1.5
                    let height = width * 0.35
                    let centerX = (leftMouth.x + rightMouth.x) / 2
                    let y = mouthTop.y + height * 0.10
                    let rect = CGRect(x: centerX - width/2, y: y, width: width, height: height)
                    overlay.draw(in: rect)
                    print("‚úÖ Applied mustache (early) at: \(rect)")
                    filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                    filterOverlay.isHidden = false
                    return
                }
            case .hat:
                guard let overlay = UIImage(named: FilterType.hat.imageName) else { print("‚ö†Ô∏è Missing image for hat (early path)"); break }
                if let fr = faceRectFromLandmarks(firstFace) {
                    let width = fr.width * 1.8
                    let height = width * 0.8
                    let topHead = mapPoint(firstFace[10])
                    let rect = CGRect(x: topHead.x - width/2,
                                      y: topHead.y - height * 0.7,
                                      width: width,
                                      height: height)
                    overlay.draw(in: rect)
                    print("‚úÖ Applied hat (early) at: \(rect)")
                    filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                    filterOverlay.isHidden = false
                    return
                }
            case .dogFace:
                guard let overlay = UIImage(named: FilterType.dogFace.imageName) else { print("‚ö†Ô∏è Missing image for dogFace (early path)"); break }
                if let fr = faceRectFromLandmarks(firstFace) {
                    let width = fr.width * 1.25
                    let height = width * 0.75
                    let rect = CGRect(x: fr.midX - width/2,
                                      y: fr.minY - height * 0.15,
                                      width: width,
                                      height: height)
                    overlay.draw(in: rect)
                    print("‚úÖ Applied dogFace (early) at: \(rect)")
                    filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                    filterOverlay.isHidden = false
                    return
                }
            default:
                break
            }
        }
        
        // ·∫¢nh overlay m·∫∑c ƒë·ªãnh cho c√°c filter overlay d√πng 1 ·∫£nh (dog, glasses, mustache, hat)
        let baseFilterImage = UIImage(named: filterType.imageName)
        print("üßæ baseFilterImage name=\(filterType.imageName) exists=\(baseFilterImage != nil)")
        
        // N·∫øu kh√¥ng c√≥ landmarks, s·ª≠ d·ª•ng filter tƒ©nh
        if landmarksResult == nil || landmarksResult!.faceLandmarks.isEmpty {
            if let staticFilterImage = applyStaticFilter(to: UIImage(), type: filterType, viewSize: viewSize) {
                filterOverlay.image = staticFilterImage
            } else {
                filterOverlay.image = nil
            }
            return
        }
        
        // N·∫øu c√≥ landmarks, s·ª≠ d·ª•ng d·ªØ li·ªáu landmarks ƒë·ªÉ v·∫Ω filter
        guard let firstFace = landmarksResult!.faceLandmarks.first else {
            filterOverlay.image = nil
            return
        }
        print("üßÆ firstFace.count=\(firstFace.count) for type=\(filterType.displayName)")
        
        // T√≠nh to√°n t·ªâ l·ªá khung h√¨nh th·ª±c t·∫ø c·ªßa camera preview
        // ƒêi·ªÅu n√†y quan tr·ªçng v√¨ t·ªça ƒë·ªô MediaPipe ƒë∆∞·ª£c chu·∫©n h√≥a trong kho·∫£ng [0,1]
        // nh∆∞ng khung h√¨nh camera c√≥ th·ªÉ c√≥ t·ªâ l·ªá kh√°c v·ªõi UIImageView
        
        // Map t·ªça ƒë·ªô t·ª´ frame camera sang preview (aspectFill)
        let scale = max(viewSize.width / frameSize.width, viewSize.height / frameSize.height)
        let scaledSize = CGSize(width: frameSize.width * scale, height: frameSize.height * scale)
        let offsetX = (viewSize.width - scaledSize.width) / 2.0
        let offsetY = (viewSize.height - scaledSize.height) / 2.0
        
        func mapPoint(_ landmark: NormalizedLandmark) -> CGPoint {
            let xNormOriginal = CGFloat(landmark.x)
            let xNorm = isFrontCamera ? (1 - xNormOriginal) : xNormOriginal
            let yNorm = CGFloat(landmark.y)
            let xFrame = xNorm * frameSize.width
            let yFrame = yNorm * frameSize.height
            return CGPoint(x: xFrame * scale + offsetX, y: yFrame * scale + offsetY)
        }
        
        func mapFaceRect(_ landmarks: [NormalizedLandmark]) -> CGRect? {
            guard !landmarks.isEmpty else { return nil }
            var minX: CGFloat = 1, minY: CGFloat = 1, maxX: CGFloat = 0, maxY: CGFloat = 0
            for lm in landmarks {
                let xNormOriginal = CGFloat(lm.x)
                let xNorm = isFrontCamera ? (1 - xNormOriginal) : xNormOriginal
                let yNorm = CGFloat(lm.y)
                minX = min(minX, xNorm)
                minY = min(minY, yNorm)
                maxX = max(maxX, xNorm)
                maxY = max(maxY, yNorm)
            }
            let left = minX
            let right = maxX
            let top = minY
            let bottom = maxY
            let leftFrame = left * frameSize.width
            let topFrame = top * frameSize.height
            let widthFrame = (right - left) * frameSize.width
            let heightFrame = (bottom - top) * frameSize.height
            return CGRect(x: leftFrame * scale + offsetX,
                          y: topFrame * scale + offsetY,
                          width: widthFrame * scale,
                          height: heightFrame * scale)
        }
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ filter d·ª±a tr√™n landmarks
        var filterRect = CGRect.zero
        print("üö© entering switch for type=\(filterType.displayName)")
        
        switch filterType {
        case .dogFace:
            guard let _ = baseFilterImage else { print("‚ö†Ô∏è Missing image for dogFace: \(filterType.imageName)"); break }
            // T√≠nh to√°n h√¨nh ch·ªØ nh·∫≠t bao quanh khu√¥n m·∫∑t
            if let faceRect = mapFaceRect(firstFace) {
                let width = faceRect.width * 1.25
                let height = width * 0.75
                filterRect = CGRect(
                    x: faceRect.midX - width/2,
                    y: faceRect.minY - height * 0.15,
                    width: width,
                    height: height
                )
                print("üê∂ Dog face filter rect: \(filterRect)")
            }
            
        case .glasses:
            print("üö© inside case .glasses")
            guard let _ = baseFilterImage else { print("‚ö†Ô∏è Missing image for glasses: \(filterType.imageName)"); break }
            // S·ª≠ d·ª•ng c√°c ƒëi·ªÉm landmarks m·∫Øt
            if firstFace.count >= 468 {
                let leftEyeIdx = 33  // ƒêi·ªÉm ngo√†i c√πng b√™n tr√°i c·ªßa m·∫Øt tr√°i
                let rightEyeIdx = 263 // ƒêi·ªÉm ngo√†i c√πng b√™n ph·∫£i c·ªßa m·∫Øt ph·∫£i
                let leftEyeBottomIdx = 145  // ƒêi·ªÉm d∆∞·ªõi c·ªßa m·∫Øt tr√°i
                let rightEyeBottomIdx = 374 // ƒêi·ªÉm d∆∞·ªõi c·ªßa m·∫Øt ph·∫£i
                
                let leftEye = mapPoint(firstFace[leftEyeIdx])
                let rightEye = mapPoint(firstFace[rightEyeIdx])
                let leftEyeBottom = mapPoint(firstFace[leftEyeBottomIdx])
                let rightEyeBottom = mapPoint(firstFace[rightEyeBottomIdx])
                
                let eyeDistance = distance(from: leftEye, to: rightEye)
                let width = eyeDistance * 1.6
                let height = width * 0.5
                
                // V·ªã tr√≠ Y d·ª±a tr√™n ƒëi·ªÉm d∆∞·ªõi m·∫Øt
                let yPosition = (leftEyeBottom.y + rightEyeBottom.y) / 2
                
                filterRect = CGRect(
                    x: (leftEye.x + rightEye.x)/2 - width/2,
                    y: yPosition - height * 0.3,
                    width: width,
                    height: height
                )
                print("üëì Glasses filter rect: \(filterRect), eye distance: \(eyeDistance)")
            }
            
        case .mustache:
            guard let _ = baseFilterImage else { print("‚ö†Ô∏è Missing image for mustache: \(filterType.imageName)"); break }
            print("üß™ Enter mustache case")
            // S·ª≠ d·ª•ng c√°c ƒëi·ªÉm landmarks mi·ªáng v√† m≈©i
            if firstFace.count >= 468 {
                let noseBottomIdx = 2   // ƒêi·ªÉm d∆∞·ªõi m≈©i (∆∞·ªõc l∆∞·ª£ng)
                let mouthTopIdx = 0     // ƒêi·ªÉm gi·ªØa tr√™n c·ªßa mi·ªáng
                let leftMouthIdx = 61   // ƒêi·ªÉm tr√°i c·ªßa mi·ªáng
                let rightMouthIdx = 291 // ƒêi·ªÉm ph·∫£i c·ªßa mi·ªáng
                
                let noseBottom = mapPoint(firstFace[noseBottomIdx])
                let mouthTop = mapPoint(firstFace[mouthTopIdx])
                let leftMouth = mapPoint(firstFace[leftMouthIdx])
                let rightMouth = mapPoint(firstFace[rightMouthIdx])
                print("üß™ Points noseBottom=\(noseBottom) mouthTop=\(mouthTop) leftMouth=\(leftMouth) rightMouth=\(rightMouth)")
                
                let mouthWidth = distance(from: leftMouth, to: rightMouth)
                let width = mouthWidth * 1.5
                let height = width * 0.35
                let centerX = (leftMouth.x + rightMouth.x) / 2
                
                // ƒê·∫∑t r√¢u ngay d∆∞·ªõi m≈©i, kh√¥ng ch·∫°m m√¥i
                let y = min(noseBottom.y + height * 0.05, mouthTop.y - height * 0.25)
                
                filterRect = CGRect(
                    x: centerX - width/2,
                    y: y,
                    width: width,
                    height: height
                )
                print("üë® Mustache filter rect: \(filterRect), mouth width: \(mouthWidth)")
            } else {
                print("‚ö†Ô∏è firstFace.count < 468: \(firstFace.count)")
            }
            
        case .hat:
            guard let _ = baseFilterImage else { print("‚ö†Ô∏è Missing image for hat: \(filterType.imageName)"); break }
            // S·ª≠ d·ª•ng c√°c landmark c·ª• th·ªÉ cho m≈©
            if firstFace.count >= 468 {
                let topHeadIdx = 10    // ƒêi·ªÉm ƒë·ªânh ƒë·∫ßu
                let foreheadIdx = 151  // ƒêi·ªÉm gi·ªØa tr√°n
                
                let topHead = mapPoint(firstFace[topHeadIdx])
                let forehead = mapPoint(firstFace[foreheadIdx])
                
                // T√≠nh to√°n k√≠ch th∆∞·ªõc khu√¥n m·∫∑t ƒë·ªÉ x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc m≈©
                if let faceRect = mapFaceRect(firstFace) {
                    let faceWidth = faceRect.width
                    
                    // T√≠nh to√°n chi·ªÅu cao ƒë·∫ßu
                    let headHeight = distance(from: topHead, to: forehead)
                    _ = headHeight
                    
                    let width = faceWidth * 1.8
                    let height = width * 0.8
                    
                    filterRect = CGRect(
                        x: topHead.x - width/2,
                        y: topHead.y - height * 0.7, // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ m≈© l√™n cao h∆°n
                        width: width,
                        height: height
                    )
                    print("üé© Hat filter rect: \(filterRect)")
                }
            }
        
        case .xmasSanta:
            if firstFace.count >= 468,
               let faceRect = mapFaceRect(firstFace) {
                // 1) M≈© Noel (d·ª±a v√†o 159/386)
                if let santaHat = UIImage(named: FilterType.xmasSanta.imageName) {
                    let leftBrow = mapPoint(firstFace[159])
                    let rightBrow = mapPoint(firstFace[386])
                    let browCenter = CGPoint(x: (leftBrow.x + rightBrow.x)/2.0, y: (leftBrow.y + rightBrow.y)/2.0)
                    let hatWidth = faceRect.width * 1.9
                    let hatAspect = santaHat.size.height / max(1, santaHat.size.width)
                    let hatHeight = hatWidth * hatAspect
                    let hatTopY = browCenter.y - hatHeight
                    santaHat.draw(in: CGRect(x: faceRect.midX - hatWidth/2, y: hatTopY, width: hatWidth, height: hatHeight))
                }
                // 2) R√¢u Noel (midpoint m√¥i tr√™n‚Äìc·∫±m)
                if let beard = UIImage(named: FilterType.xmasBeard.imageName) {
                    let upperLip = mapPoint(firstFace[0])
                    let chin = mapPoint(firstFace[152])
                    let center = CGPoint(x: (upperLip.x + chin.x)/2.0, y: (upperLip.y + chin.y)/2.0)
                    let lipToChin = distance(from: upperLip, to: chin)
                    let beardHeight = lipToChin * 1.2
                    let beardWidth = max(faceRect.width * 1.7, beardHeight) // gi·ªØ t·ªâ l·ªá r·ªông
                    let beardAspect = beard.size.height / max(1, beard.size.width)
                    let finalBeardHeight = beardWidth * beardAspect
                    let beardRect = CGRect(x: center.x - beardWidth/2,
                                           y: center.y - finalBeardHeight/2,
                                           width: beardWidth,
                                           height: finalBeardHeight)
                    beard.draw(in: beardRect)
                }
                filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                filterOverlay.isHidden = false
                print(" Applied Santa overlay")
                return
            } else {
                filterOverlay.image = nil
            }
        case .xmasBeard:
            if firstFace.count > 152,
               let faceRect = mapFaceRect(firstFace),
               let beard = UIImage(named: FilterType.xmasBeard.imageName) {
                let upperLip = mapPoint(firstFace[0])
                let chin = mapPoint(firstFace[152])
                let center = CGPoint(x: (upperLip.x + chin.x)/2.0, y: (upperLip.y + chin.y)/2.0)
                let aspect = beard.size.height / max(1, beard.size.width)
                let beardWidth = faceRect.width * 1.25
                let finalHeight = beardWidth * aspect
                let offsetDown = faceRect.height * 0.10
                let rect = CGRect(x: center.x - beardWidth/2,
                                  y: center.y - finalHeight/2 + offsetDown,
                                  width: beardWidth,
                                  height: finalHeight)
                beard.draw(in: rect)
                print(" Applied XmasBeard overlay at: \(rect)")
                filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                filterOverlay.isHidden = false
                return
            } else {
                filterOverlay.image = nil
                return
            }
        case .funnyBigEyes, .funnyTinyNose, .funnyWideMouth, .funnyPuffyCheeks, .funnySwirl, .funnyLongChin, .funnyMegaFace, .funnyAlienHead, .funnyWarp, .beauty, .xmasWarm:
            // Filter bi·∫øn d·∫°ng, kh√¥ng v·∫Ω overlay ·∫£nh ·ªü pipeline overlay
            filterOverlay.image = nil
            return
        case .none:
            filterOverlay.image = nil
            return
        }
        print(" after switch, filterRect=\(filterRect)")
        
        // V·∫Ω filter n·∫øu c√≥ v·ªã tr√≠ h·ª£p l·ªá v√† c√≥ ·∫£nh base
        if filterRect.width > 0 && filterRect.height > 0, let overlayImage = baseFilterImage {
            print(" Drawing overlay image size=\(overlayImage.size) at rect=\(filterRect)")
            overlayImage.draw(in: filterRect)
            filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
            filterOverlay.isHidden = false
            print(" Applied filter to overlay at: \(filterRect)")
        } else {
            print(" Could not calculate filter position or missing base image. rect=\(filterRect) hasImage=\(baseFilterImage != nil)")
            // V·∫Ω √¥ debug ƒë·ªÉ ki·ªÉm tra mapping n·∫øu c√≥ rect nh∆∞ng thi·∫øu ·∫£nh ho·∫∑c rect v·∫´n h·ª£p l·ªá
            if filterRect.width > 0 && filterRect.height > 0 {
                UIColor.red.withAlphaComponent(0.2).setFill()
                UIBezierPath(rect: filterRect).fill()
                filterOverlay.image = UIGraphicsGetImageFromCurrentImageContext()
                filterOverlay.isHidden = false
                print("Drew debug rect at: \(filterRect)")
            } else {
            filterOverlay.image = nil
            }
        }
    }
    
    // C·∫≠p nh·∫≠t filter overlay v·ªõi d·ªØ li·ªáu landmarks
    func updateFilterOverlay(_ filterOverlay: UIImageView, with landmarksResult: FaceLandmarkerResult?, viewSize: CGSize, isFrontCamera: Bool = false) {
        updateFilterOverlay(filterOverlay, with: landmarksResult, viewSize: viewSize, frameSize: viewSize, isFrontCamera: isFrontCamera)
    }
    
    // API m·ªõi: truy·ªÅn th√™m frameSize ƒë·ªÉ map ƒë√∫ng khi preview d√πng aspectFill
    func updateFilterOverlay(_ filterOverlay: UIImageView, with landmarksResult: FaceLandmarkerResult?, viewSize: CGSize, frameSize: CGSize, isFrontCamera: Bool = false) {
        updateFilterOverlayWithCorrectAspectRatio(filterOverlay, with: landmarksResult, viewSize: viewSize, frameSize: frameSize, isFrontCamera: isFrontCamera)
    }
} 
