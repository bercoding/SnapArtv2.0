import Foundation
import UIKit
import CoreData
import FirebaseAuth // Th√™m import FirebaseAuth
import Combine // Th√™m import Combine
import FirebaseFirestore // Th√™m import FirebaseFirestore

class GalleryViewModel: ObservableObject {
    @Published var images: [GalleryImage] = []
    @Published var selectedImage: GalleryImage?
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    
    private let coreDataManager = CoreDataManager.shared
    private let firebaseImageService = FirebaseImageService.shared // Th√™m Firebase Image Service
    
    private var signInObserver: AnyCancellable?
    private var signOutObserver: AnyCancellable? // ƒê·ªÉ qu·∫£n l√Ω observers cho NotificationCenter
    private var syncTimer: Timer? // Th√™m Timer ƒë·ªÉ ƒë·ªìng b·ªô ƒë·ªãnh k·ª≥
    
    init() {
        setupObservers()
        // G·ªçi fetchSavedImages ƒë·ªÉ t·∫£i ·∫£nh c·ª•c b·ªô tr∆∞·ªõc
        fetchSavedImages()
        // Sau ƒë√≥, g·ªçi syncImages ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi Firebase n·∫øu c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
        if Auth.auth().currentUser != nil {
            syncImages()
        }
    }
    
    deinit {
        signInObserver?.cancel()
        signOutObserver?.cancel()
        stopSyncTimer() // D·ª´ng timer khi ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c gi·∫£i ph√≥ng
    }
    
    private func setupObservers() {
        signInObserver = NotificationCenter.default.publisher(for: .userDidSignIn)
            .sink { [weak self] _ in
                print("üîî User signed in. Starting Firebase sync...")
                self?.syncImages() // B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô khi ƒëƒÉng nh·∫≠p
                self?.startSyncTimer() // B·∫Øt ƒë·∫ßu timer ƒë·ªìng b·ªô
            }
        
        signOutObserver = NotificationCenter.default.publisher(for: .userDidSignOut)
            .sink { [weak self] _ in
                print("üîî User signed out. Clearing gallery...")
                // Clear gallery khi ƒëƒÉng xu·∫•t ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh c·ªßa t√†i kho·∫£n kh√°c
                self?.images = []
                // N·∫øu b·∫°n mu·ªën x√≥a t·∫•t c·∫£ ·∫£nh c·ª•c b·ªô khi ƒëƒÉng xu·∫•t, h√£y g·ªçi: 
                // self?.coreDataManager.deleteAllSavedImages() 
                // Tuy nhi√™n, c·∫©n th·∫≠n v·ªõi tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.
                self?.stopSyncTimer() // D·ª´ng timer ƒë·ªìng b·ªô khi ƒëƒÉng xu·∫•t
            }
    }
    
    // MARK: - Sync Timer Management
    private func startSyncTimer() {
        // ƒê·∫£m b·∫£o d·ª´ng timer c≈© n·∫øu c√≥
        syncTimer?.invalidate()
        syncTimer = nil
        
        // B·∫Øt ƒë·∫ßu timer m·ªõi ch·∫°y m·ªói 5 gi√¢y
        syncTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            print("‚è≥ Timer k√≠ch ho·∫°t: ƒêang ƒë·ªìng b·ªô Firebase...")
            self.syncImages()
        }
        RunLoop.current.add(syncTimer!, forMode: .common)
    }
    
    private func stopSyncTimer() {
        syncTimer?.invalidate()
        syncTimer = nil
        print("‚èπÔ∏è Timer ƒë·ªìng b·ªô ƒë√£ d·ª´ng.")
    }
    
    // MARK: - CoreData Operations
    
    // L·∫•y danh s√°ch ·∫£nh ƒë√£ l∆∞u t·ª´ CoreData
    func fetchSavedImages() {
        isLoading = true
        
        DispatchQueue.global(qos: .userInitiated).async { [weak self] in
            guard let self = self else { return }
            
            do {
                let savedImages = try self.coreDataManager.fetchSavedImages()
                
                let galleryImages = savedImages.compactMap { GalleryImage.from(savedImage: $0) }
                    .sorted(by: { $0.createdAt > $1.createdAt })
                
                DispatchQueue.main.async {
                    self.images = galleryImages
                    self.isLoading = false
                    print("‚úÖ ƒê√£ t·∫£i \(galleryImages.count) ·∫£nh t·ª´ CoreData. (UI updated)")
                    print("‚ÑπÔ∏è GalleryViewModel: S·ªë ·∫£nh tr√™n UI sau fetchSavedImages: \(self.images.count)")
                }
            } catch {
                DispatchQueue.main.async {
                    self.errorMessage = "Kh√¥ng th·ªÉ t·∫£i ·∫£nh: \(error.localizedDescription)"
                    self.isLoading = false
                    print("‚ùå L·ªói t·∫£i ·∫£nh t·ª´ CoreData: \(error.localizedDescription)")
                }
            }
        }
    }
    
    // L∆∞u m·ªôt ·∫£nh m·ªõi v√†o CoreData v√† Firebase
    func saveImage(_ image: UIImage, filterType: String? = nil) {
        isLoading = true
        errorMessage = nil
        
        Task.detached(priority: .background) { [weak self] in // S·ª≠ d·ª•ng Task.detached ƒë·ªÉ ch·∫°y b·∫•t ƒë·ªìng b·ªô
            guard let self = self else { return }
            
            guard let imageData = image.jpegData(compressionQuality: 0.8) else {
                await MainActor.run { self.errorMessage = "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh d·ªØ li·ªáu" }
                return
            }
            
            let newId = UUID()
            let createdAt = Date()
            
            // L∆∞u v√†o CoreData tr∆∞·ªõc
            do {
                var metadata: Data? = nil
                if let filterType = filterType {
                    let metadataDict: [String: Any] = ["filterType": filterType]
                    metadata = try? JSONSerialization.data(withJSONObject: metadataDict)
                }
                
                _ = try self.coreDataManager.saveSavedImage(imageData: imageData, id: newId, createdAt: createdAt, metadata: metadata)
                print("‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o CoreData v·ªõi ID: \(newId).")
                
                // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c v·ªõi ·∫£nh CoreData
                if let galleryImage = GalleryImage.from(savedImage: try self.coreDataManager.fetchSavedImage(withId: newId)!) {
                    await MainActor.run { 
                        print("‚ÑπÔ∏è C·∫≠p nh·∫≠t UI v·ªõi ·∫£nh m·ªõi ID: \(galleryImage.id)")
                        self.images.insert(galleryImage, at: 0)
                        self.isLoading = false
                        print("‚ÑπÔ∏è GalleryViewModel: S·ªë ·∫£nh tr√™n UI sau khi l∆∞u ·∫£nh m·ªõi: \(self.images.count)")
                    }
                }
                
                // Sau ƒë√≥, t·∫£i l√™n Firebase (ch·ªâ khi c√≥ user ƒëƒÉng nh·∫≠p)
                if Auth.auth().currentUser != nil {
                    print("‚ÑπÔ∏è ƒêang c·ªë g·∫Øng t·∫£i ·∫£nh ID: \(newId) l√™n Firebase...")
                    do {
                        try await self.firebaseImageService.uploadImage(image: image, id: newId, filterType: filterType, createdAt: createdAt)
                        print("‚úÖ ·∫¢nh \(newId) ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n Firebase th√†nh c√¥ng.")
                    } catch {
                        print("‚ùå L·ªói khi t·∫£i ·∫£nh \(newId) l√™n Firebase: \(error.localizedDescription)")
                        await MainActor.run { self.errorMessage = "L·ªói t·∫£i ·∫£nh l√™n ƒë√°m m√¢y: \(error.localizedDescription)" }
                    }
                }
            } catch {
                print("‚ùå L·ªói khi l∆∞u ·∫£nh v√†o CoreData: \(error.localizedDescription)")
                await MainActor.run { 
                    self.errorMessage = "Kh√¥ng th·ªÉ l∆∞u ·∫£nh c·ª•c b·ªô: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }
    
    // X√≥a m·ªôt ·∫£nh d·ª±a tr√™n ID t·ª´ CoreData v√† Firebase
    func deleteImage(withId id: UUID) {
        isLoading = true
        errorMessage = nil
        Task.detached(priority: .background) { [weak self] in
            guard let self = self else { return }
            
            do {
                try self.coreDataManager.deleteSavedImage(withId: id)
                print("‚úÖ ·∫¢nh v·ªõi ID \(id) ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi CoreData.")
                
                // X√≥a ·∫£nh tr√™n Firebase (ch·ªâ khi c√≥ user ƒëƒÉng nh·∫≠p)
                if Auth.auth().currentUser != nil {
                    do {
                        try await self.firebaseImageService.deleteImage(id: id)
                        print("‚úÖ ·∫¢nh \(id) ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Firebase.")
                    } catch {
                        print("‚ùå L·ªói khi x√≥a ·∫£nh \(id) kh·ªèi Firebase: \(error.localizedDescription)")
                        await MainActor.run { self.errorMessage = "L·ªói x√≥a ·∫£nh tr√™n ƒë√°m m√¢y: \(error.localizedDescription)" }
                    }
                }
                
                await MainActor.run { // C·∫≠p nh·∫≠t UI tr√™n MainActor
                    self.images.removeAll { $0.id == id }
                    if self.selectedImage?.id == id {
                        self.selectedImage = nil
                    }
                    self.isLoading = false
            }
        } catch {
                print("‚ùå L·ªói khi x√≥a ·∫£nh kh·ªèi CoreData: \(error.localizedDescription)")
                await MainActor.run { 
                    self.errorMessage = "Kh√¥ng th·ªÉ x√≥a ·∫£nh c·ª•c b·ªô: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }
    
    // X√≥a t·∫•t c·∫£ ·∫£nh t·ª´ CoreData v√† Firebase
    func deleteAllImages() {
        isLoading = true
        errorMessage = nil
        Task.detached(priority: .background) { [weak self] in
            guard let self = self else { return }
            
            let imagesToDelete = self.images // L·∫•y b·∫£n sao tr∆∞·ªõc khi x√≥a kh·ªèi CoreData
            
            do {
                try self.coreDataManager.deleteAllSavedImages()
                print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ ·∫£nh kh·ªèi CoreData.")
                
                // X√≥a t·∫•t c·∫£ ·∫£nh tr√™n Firebase (ch·ªâ khi c√≥ user ƒëƒÉng nh·∫≠p)
                if Auth.auth().currentUser != nil {
                    for image in imagesToDelete {
                        do {
                            try await self.firebaseImageService.deleteImage(id: image.id)
                            print("‚úÖ ·∫¢nh \(image.id) ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Firebase.")
                        } catch {
                            print("‚ùå L·ªói khi x√≥a ·∫£nh \(image.id) kh·ªèi Firebase: \(error.localizedDescription)")
                            // Ti·∫øp t·ª•c x√≥a c√°c ·∫£nh kh√°c ngay c·∫£ khi c√≥ l·ªói
                        }
                    }
                    await MainActor.run { self.errorMessage = nil } // Clear error n·∫øu c√≥
                }
                
                await MainActor.run { // C·∫≠p nh·∫≠t UI tr√™n MainActor
                    self.images = []
                    self.selectedImage = nil
                    self.isLoading = false
                }
        } catch {
                print("‚ùå L·ªói khi x√≥a t·∫•t c·∫£ ·∫£nh kh·ªèi CoreData: \(error.localizedDescription)")
                await MainActor.run { 
                    self.errorMessage = "Kh√¥ng th·ªÉ x√≥a t·∫•t c·∫£ ·∫£nh c·ª•c b·ªô: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }
    
    // MARK: - Firebase Sync
    func syncImages() {
        guard Auth.auth().currentUser != nil else {
            print("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒëƒÉng nh·∫≠p, b·ªè qua ƒë·ªìng b·ªô Firebase.")
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        Task.detached(priority: .userInitiated) { [weak self] in
            guard let self = self else { return }
            
            do {
                // 1. T·∫£i metadata t·ª´ Firebase
                let firebaseMetadataList = try await self.firebaseImageService.fetchImageMetadata()
                let coreDataImages = try self.coreDataManager.fetchSavedImages()
                let coreDataImageIds = Set(coreDataImages.compactMap { $0.id })
                
                let firebaseImageIds = Set(firebaseMetadataList.compactMap { $0["id"] as? String }.compactMap { UUID(uuidString: $0) })

                // 2. X√≥a ·∫£nh kh·ªèi CoreData n·∫øu kh√¥ng c√≥ tr√™n Firebase (ƒë·ªÉ ƒë·ªìng b·ªô h√≥a vi·ªác x√≥a)
                for coreDataImage in coreDataImages {
                    if let id = coreDataImage.id, !firebaseImageIds.contains(id) {
                        // Ki·ªÉm tra n·∫øu ·∫£nh m·ªõi ƒë∆∞·ª£c t·∫°o (v√≠ d·ª•: trong v√≤ng5 gi√¢y g·∫ßn ƒë√¢y)
                        // N·∫øu l√† ·∫£nh r·∫•t m·ªõi, gi·∫£ ƒë·ªãnh n√≥ v·∫´n ƒëang t·∫£i l√™n v√† ch∆∞a x√≥a.
                        if Date().timeIntervalSince(coreDataImage.createdAt ?? Date.distantPast) < 5 {
                            print("‚ÑπÔ∏è Gi·ªØ ·∫£nh c·ª•c b·ªô \(id) v√¨ m·ªõi ƒë∆∞·ª£c t·∫°o v√† c√≥ th·ªÉ ƒëang t·∫£i l√™n Firebase.")
                            continue // B·ªè qua vi·ªác x√≥a ·∫£nh m·ªõi ƒë∆∞·ª£c t·∫°o
                        }
                        print("‚ö†Ô∏è X√≥a ·∫£nh c·ª•c b·ªô \(id) v√¨ kh√¥ng t√¨m th·∫•y tr√™n Firebase v√† kh√¥ng ph·∫£i ·∫£nh m·ªõi.")
                        try self.coreDataManager.deleteSavedImage(withId: id)
                    }
                }

                // 3. X·ª≠ l√Ω ·∫£nh c·∫ßn t·∫£i t·ª´ Firebase v·ªÅ CoreData
                for metadata in firebaseMetadataList {
                    // Extract required non-optional values first
                    guard let idString = metadata["id"] as? String,
                          let id = UUID(uuidString: idString),
                          let storagePath = metadata["storagePath"] as? String,
                          let createdAtTimestamp = metadata["createdAt"] as? Timestamp
                    else {
                        print("Skipping Firebase metadata due to missing required fields: \(metadata)")
                        continue
                    }
                    
                    // Check if image already exists in CoreData
                    if coreDataImageIds.contains(id) {
                        print("·∫¢nh \(id) ƒë√£ t·ªìn t·∫°i trong CoreData, b·ªè qua t·∫£i v·ªÅ.")
                        // Ki·ªÉm tra xem ·∫£nh ƒë√£ c√≥ trong danh s√°ch ·∫£nh hi·ªán t·∫°i ch∆∞a
                        if !self.images.contains(where: { $0.id == id }) {
                            if let galleryImage = GalleryImage.from(savedImage: try self.coreDataManager.fetchSavedImage(withId: id)!) {
                                await MainActor.run { 
                                    print("‚ÑπÔ∏è C·∫≠p nh·∫≠t UI v·ªõi ·∫£nh \(id) ƒë√£ t·ªìn t·∫°i trong CoreData nh∆∞ng ch∆∞a c√≥ tr√™n UI.")
                                    self.images.insert(galleryImage, at: 0)
                                }
                            }
                        }
                        continue
                    }
                    print("‚ÑπÔ∏è T·∫£i ·∫£nh ID: \(id) t·ª´ Firebase v·ªÅ CoreData...")
                    // Extract optional filterType
                    let firebaseFilterType = metadata["filterType"] as? String // This is String?
                    
                    do {
                        let downloadedImage = try await self.firebaseImageService.downloadImage(from: storagePath)
                        
                        var metadataDict: [String: Any] = [:]
                        if let ft = firebaseFilterType { // Use the optional filterType here
                            metadataDict["filterType"] = ft
                        }
                        let metadataData = try? JSONSerialization.data(withJSONObject: metadataDict)
                        
                        _ = try self.coreDataManager.saveSavedImage(imageData: downloadedImage.jpegData(compressionQuality: 0.8)!, id: id, createdAt: createdAtTimestamp.dateValue(), metadata: metadataData)
                        print("‚úÖ ƒê√£ t·∫£i ·∫£nh \(id) t·ª´ Firebase v·ªÅ CoreData. (L∆∞u c·ª•c b·ªô)")
                        // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c v·ªõi ·∫£nh v·ª´a t·∫£i v·ªÅ
                        if let galleryImage = GalleryImage.from(savedImage: try self.coreDataManager.fetchSavedImage(withId: id)!) {
                            await MainActor.run { 
                                print("‚ÑπÔ∏è C·∫≠p nh·∫≠t UI v·ªõi ·∫£nh v·ª´a t·∫£i v·ªÅ ID: \(galleryImage.id)")
                    self.images.insert(galleryImage, at: 0)
                }
            }
        } catch {
                        print("‚ùå L·ªói khi t·∫£i ·∫£nh \(id) t·ª´ Firebase: \(error.localizedDescription)")
                        // Kh√¥ng c·∫ßn hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng ·ªü ƒë√¢y, ch·ªâ log
                    }
                }
                
                // 4. X·ª≠ l√Ω ·∫£nh c·∫ßn t·∫£i t·ª´ CoreData l√™n Firebase (n·∫øu mu·ªën ƒë·ªìng b·ªô 2 chi·ªÅu)
                // (Logic n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong `saveImage`, n√™n kh√¥ng c·∫ßn th√™m ·ªü ƒë√¢y)

                // 5. C·∫≠p nh·∫≠t UI sau khi ƒë·ªìng b·ªô
                await MainActor.run {
                    print("‚ÑπÔ∏è ƒê·ªìng b·ªô Firebase ho√†n t·∫•t. T·∫£i l·∫°i ·∫£nh CoreData ƒë·ªÉ c·∫≠p nh·∫≠t UI.")
                    self.fetchSavedImages() // T·∫£i l·∫°i danh s√°ch ·∫£nh t·ª´ CoreData ƒë·ªÉ hi·ªÉn th·ªã c√°c ·∫£nh m·ªõi ƒë∆∞·ª£c ƒë·ªìng b·ªô
                    self.isLoading = false
                    print("‚ÑπÔ∏è GalleryViewModel: S·ªë ·∫£nh tr√™n UI sau syncImages: \(self.images.count)")
                }
                
            } catch {
                print("‚ùå L·ªói ƒë·ªìng b·ªô Firebase t·ªïng qu√°t: \(error.localizedDescription)")
                await MainActor.run {
                    self.errorMessage = "L·ªói ƒë·ªìng b·ªô h√≥a ·∫£nh: \(error.localizedDescription)"
                    self.isLoading = false
        }
    }
        }
    }
} 
