import UIKit
import MediaPipeTasksVision

class MediaPipeFaceMeshManager {
    static let shared = MediaPipeFaceMeshManager()
    
    // Face Landmarker
    private var faceLandmarker: FaceLandmarker?
    private var isInitializing: Bool = false
    private var didInitFailOnce: Bool = false
    
    // Model path
    private let modelPath = "face_landmarker"
    
    private init() {
        setupFaceLandmarker()
        
        // ƒêƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o khi app v√†o background ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appDidEnterBackground),
            name: UIApplication.didEnterBackgroundNotification,
            object: nil)
            
        // ƒêƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o khi app ho·∫°t ƒë·ªông tr·ªü l·∫°i ƒë·ªÉ kh·ªüi t·∫°o l·∫°i n·∫øu c·∫ßn
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appWillEnterForeground),
            name: UIApplication.willEnterForegroundNotification,
            object: nil)
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
        cleanupFaceLandmarker()
    }
    
    @objc private func appDidEnterBackground() {
        // Gi·∫£i ph√≥ng t√†i nguy√™n khi app v√†o background
        cleanupFaceLandmarker()
    }
    
    @objc private func appWillEnterForeground() {
        // Kh·ªüi t·∫°o l·∫°i khi app ho·∫°t ƒë·ªông tr·ªü l·∫°i
        if faceLandmarker == nil {
            setupFaceLandmarker()
        }
    }
    
    // Gi·∫£i ph√≥ng faceLandmarker ƒë·ªÉ gi·∫£m s·ª≠ d·ª•ng b·ªô nh·ªõ
    private func cleanupFaceLandmarker() {
        faceLandmarker = nil
        isInitializing = false
    }
    
    // ƒê·∫£m b·∫£o ƒë√£ kh·ªüi t·∫°o tr∆∞·ªõc khi s·ª≠ d·ª•ng
    private func ensureInitialized() {
        if faceLandmarker == nil && !isInitializing {
            if didInitFailOnce {
                print("‚ôªÔ∏è Re-attempting FaceLandmarker initialization after previous failure‚Ä¶")
            }
            setupFaceLandmarker()
        }
    }
    
    // Kh·ªüi t·∫°o Face Landmarker
    private func setupFaceLandmarker() {
        if isInitializing { return }
        isInitializing = true
        didInitFailOnce = false
        defer { isInitializing = false }
        do {
            // T√¨m ƒë∆∞·ªùng d·∫´n file model - th·ª≠ nhi·ªÅu c√°ch kh√°c nhau
            var modelFilePath: String?
            
            // C√°ch 1: T√¨m trong th∆∞ m·ª•c Resources
            if let path1 = Bundle.main.path(forResource: modelPath, 
                                           ofType: "task", 
                                           inDirectory: "Resources") {
                // Ki·ªÉm tra file c√≥ th·ª±c s·ª± t·ªìn t·∫°i kh√¥ng
                if FileManager.default.fileExists(atPath: path1) {
                    modelFilePath = path1
                    print("üìÅ T√¨m th·∫•y model trong th∆∞ m·ª•c Resources: \(path1)")
                } else {
                    print("‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i m·∫∑c d√π path ƒë∆∞·ª£c t√¨m th·∫•y: \(path1)")
                }
            }
            // C√°ch 2: T√¨m tr·ª±c ti·∫øp trong bundle
            else if let path2 = Bundle.main.path(forResource: modelPath, 
                                                ofType: "task") {
                if FileManager.default.fileExists(atPath: path2) {
                    modelFilePath = path2
                    print("üìÅ T√¨m th·∫•y model tr·ª±c ti·∫øp trong bundle: \(path2)")
                } else {
                    print("‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i m·∫∑c d√π path ƒë∆∞·ª£c t√¨m th·∫•y: \(path2)")
                }
            }
            
            // Kh√¥ng t√¨m th·∫•y file model
            if modelFilePath == nil {
                print("‚ö†Ô∏è Face landmarker model kh√¥ng t√¨m th·∫•y, ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n:")
                let bundlePath = Bundle.main.bundlePath
                print("- Bundle path: \(bundlePath)")
                
                // Ki·ªÉm tra th∆∞ m·ª•c Resources
                let resourcesPath = Bundle.main.bundlePath + "/Resources"
                print("- Resources path: \(resourcesPath)")
                
                let fileManager = FileManager.default
                if let files = try? fileManager.contentsOfDirectory(atPath: bundlePath) {
                    print("- C√°c file trong bundle:")
                    for file in files {
                        print("  + \(file)")
                    }
                }
                
                if let resourceFiles = try? fileManager.contentsOfDirectory(atPath: resourcesPath) {
                    print("- C√°c file trong Resources:")
                    for file in resourceFiles {
                        print("  + \(file)")
                    }
                }
                didInitFailOnce = true
                return
            }
            
            // C·∫•u h√¨nh Face Landmarker
            var options = FaceLandmarkerOptions()
            guard let finalModelPath = modelFilePath else {
                print("‚ö†Ô∏è Face landmarker model path is nil")
                didInitFailOnce = true
                return
            }
            
            options.baseOptions.modelAssetPath = finalModelPath

            // T·ªëi ∆∞u c·∫•u h√¨nh - ƒë∆°n gi·∫£n h√≥a
            options.runningMode = .image // S·ª≠ d·ª•ng .image cho x·ª≠ l√Ω frame-by-frame
            options.outputFaceBlendshapes = false // Kh√¥ng c·∫ßn blendshapes
            options.outputFacialTransformationMatrixes = false // Kh√¥ng c·∫ßn transformation matrices
            options.numFaces = 1 // Ch·ªâ ph√°t hi·ªán 1 khu√¥n m·∫∑t ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t

            print("üîß Kh·ªüi t·∫°o Face Landmarker v·ªõi c·∫•u h√¨nh:")
            print("- Model path: \(finalModelPath)")
            print("- Running mode: image")
            print("- Max faces: 1")
            
            // Kh·ªüi t·∫°o Face Landmarker
            do {
                let startTime = CACurrentMediaTime()
                faceLandmarker = try FaceLandmarker(options: options)
                let endTime = CACurrentMediaTime()
                print("‚úÖ Kh·ªüi t·∫°o Face Landmarker th√†nh c√¥ng! (\((endTime - startTime) * 1000) ms)")
                didInitFailOnce = false
            } catch {
                print("‚ùå L·ªói kh·ªüi t·∫°o face landmarker: \(error)")
                print("‚ùå Chi ti·∫øt l·ªói: \(error.localizedDescription)")
                
                // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt h∆°n n·∫øu l√† NSError
                if let nsError = error as NSError? {
                    print("‚ùå Error domain: \(nsError.domain)")
                    print("‚ùå Error code: \(nsError.code)")
                    print("‚ùå Error user info: \(nsError.userInfo)")
                }
                faceLandmarker = nil
                didInitFailOnce = true
            }
        } catch {
            print("‚ùå L·ªói kh·ªüi t·∫°o face landmarker: \(error)")
            print("‚ùå Chi ti·∫øt l·ªói: \(error.localizedDescription)")
            faceLandmarker = nil
            didInitFailOnce = true
        }
    }
    
    // Ph√°t hi·ªán face mesh trong h√¨nh ·∫£nh
    func detectFaceMesh(in image: UIImage) -> FaceLandmarkerResult? {
        ensureInitialized()
        guard let faceLandmarker = faceLandmarker else {
            print("‚ö†Ô∏è Face landmarker ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return nil
        }
        
        print("üìä Detecting face mesh in image: \(image.size.width) x \(image.size.height)")
        
        // S·ª≠ d·ª•ng autoreleasepool ƒë·ªÉ qu·∫£n l√Ω b·ªô nh·ªõ t·ªët h∆°n
        return autoreleasepool { () -> FaceLandmarkerResult? in
            do {
                // Chuy·ªÉn ƒë·ªïi UIImage sang MPImage - X·ª≠ l√Ω ngo·∫°i l·ªá
                var mpImage: MPImage?
                do {
                    mpImage = try MPImage(uiImage: image)
                    print("‚úÖ Successfully converted UIImage to MPImage")
                } catch {
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi UIImage sang MPImage: \(error)")
                    return nil
                }
                
                guard let mpImage = mpImage else {
                    print("‚ö†Ô∏è MPImage l√† nil sau khi chuy·ªÉn ƒë·ªïi")
                    return nil
                }
                
                // S·ª≠ d·ª•ng semaphore ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt ti·∫øn tr√¨nh ph√°t hi·ªán c√πng l√∫c
                let semaphore = DispatchSemaphore(value: 1)
                var detectionResult: FaceLandmarkerResult?
                
                semaphore.wait()
                
                // Ph√°t hi·ªán khu√¥n m·∫∑t
                do {
                    print("üîç Running MediaPipe face detection...")
                    let startTime = CACurrentMediaTime()
                    detectionResult = try faceLandmarker.detect(image: mpImage)
                    let endTime = CACurrentMediaTime()
                    print("‚è±Ô∏è MediaPipe face detection took \((endTime - startTime) * 1000) ms")
                    
                    // Ki·ªÉm tra k·∫øt qu·∫£
                    if let result = detectionResult {
                        if result.faceLandmarks.isEmpty {
                            print("‚ÑπÔ∏è Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh")
                        } else {
                            print("‚úÖ ƒê√£ ph√°t hi·ªán \(result.faceLandmarks.count) khu√¥n m·∫∑t v·ªõi \(result.faceLandmarks.first?.count ?? 0) landmarks")
                        }
                    }
                } catch {
                    print("‚ùå L·ªói ph√°t hi·ªán khu√¥n m·∫∑t: \(error)")
                    
                    // Hi·ªÉn th·ªã chi ti·∫øt l·ªói n·∫øu c√≥ th·ªÉ
                    if let nsError = error as NSError? {
                        print("‚ùå Error domain: \(nsError.domain), code: \(nsError.code)")
                        print("‚ùå Error description: \(nsError.localizedDescription)")
                    }
                }
                
                semaphore.signal()
                return detectionResult
                
            } catch {
                print("‚ùå L·ªói ph√°t hi·ªán khu√¥n m·∫∑t: \(error)")
                return nil
            }
        }
    }
    
    // Ph√°t hi·ªán face mesh t·ª´ camera frame
    func detectFaceMesh(in pixelBuffer: CVPixelBuffer) -> FaceLandmarkerResult? {
        ensureInitialized()
        guard let faceLandmarker = faceLandmarker else {
            print("‚ö†Ô∏è Face landmarker ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return nil
        }
        
        // S·ª≠ d·ª•ng autoreleasepool ƒë·ªÉ qu·∫£n l√Ω b·ªô nh·ªõ t·ªët h∆°n
        return autoreleasepool { () -> FaceLandmarkerResult? in
            do {
                // Chuy·ªÉn ƒë·ªïi CVPixelBuffer sang MPImage - X·ª≠ l√Ω ngo·∫°i l·ªá
                var mpImage: MPImage?
                do {
                    mpImage = try MPImage(pixelBuffer: pixelBuffer)
                } catch {
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi CVPixelBuffer sang MPImage: \(error)")
                    return nil
                }
                
                guard let mpImage = mpImage else {
                    print("‚ö†Ô∏è MPImage l√† nil sau khi chuy·ªÉn ƒë·ªïi")
                    return nil
                }
                
                // Ph√°t hi·ªán khu√¥n m·∫∑t
                do {
                    let detectionResult = try faceLandmarker.detect(image: mpImage)
                    
                    // Ki·ªÉm tra k·∫øt qu·∫£
                    if detectionResult.faceLandmarks.isEmpty {
                        print("‚ÑπÔ∏è Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t trong frame")
                    } else {
                        print("‚úÖ ƒê√£ ph√°t hi·ªán \(detectionResult.faceLandmarks.count) khu√¥n m·∫∑t v·ªõi \(detectionResult.faceLandmarks.first?.count ?? 0) landmarks")
                    }
                    
                    return detectionResult
                } catch {
                    print("‚ùå L·ªói ph√°t hi·ªán khu√¥n m·∫∑t t·ª´ camera: \(error)")
                    return nil
                }
            } catch {
                print("‚ùå L·ªói ph√°t hi·ªán khu√¥n m·∫∑t t·ª´ camera: \(error)")
                return nil
            }
        }
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa Face Landmarker
    func checkStatus() -> Bool {
        return faceLandmarker != nil
    }
    
    func restartFaceLandmarker() {
        print("üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i FaceLandmarker‚Ä¶")
        cleanupFaceLandmarker()
        setupFaceLandmarker()
    }
    
    // H√†m √°p d·ª•ng filter l√™n h√¨nh ·∫£nh
    func applyFilter(on image: UIImage, landmarks: FaceLandmarkerResult, filterType: FilterType) -> UIImage? {
        print("üé≠ Applying filter: \(filterType.displayName) with landmarks")
        guard !landmarks.faceLandmarks.isEmpty, let _ = landmarks.faceLandmarks.first else {
            print("‚ö†Ô∏è No face landmarks found, returning original image")
            return image
        }
        // ·ª¶y quy·ªÅn cho FilterManager ƒë·ªÉ ƒë·∫£m b·∫£o m·ªôt ngu·ªìn logic duy nh·∫•t ·ªü View/Filter
        if let rendered = FilterManager.shared.applyDynamicFilter(
            to: image,
            with: landmarks,
            type: filterType,
            isFrontCamera: false
        ) {
            return rendered
        }
        return image
    }
    
    // Helper method ƒë·ªÉ chuy·ªÉn ƒë·ªïi landmark th√†nh ƒëi·ªÉm CGPoint
    private func convertLandmarkToPoint(_ landmark: NormalizedLandmark, in viewSize: CGSize) -> CGPoint {
        let x = min(max(CGFloat(landmark.x), 0), 1)
        let y = min(max(CGFloat(landmark.y), 0), 1)
        
        // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã chu·∫©n h√≥a sang t·ªça ƒë·ªô th·ª±c
        // L∆∞u √Ω: Kh√¥ng l·∫≠t t·ªça ƒë·ªô x ·ªü ƒë√¢y v√¨ vi·ªác ƒë√≥ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü CameraViewController
        // t√πy thu·ªôc v√†o lo·∫°i camera (tr∆∞·ªõc/sau)
        return CGPoint(x: x * viewSize.width, y: y * viewSize.height)
    }

    // Helper method ƒë·ªÉ t√≠nh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm
    private func distance(from point1: CGPoint, to point2: CGPoint) -> CGFloat {
        return sqrt(pow(point2.x - point1.x, 2) + pow(point2.y - point1.y, 2))
    }

    // Helper method ƒë·ªÉ t√≠nh rectangle bao quanh khu√¥n m·∫∑t
    private func getFaceRect(from landmarks: [NormalizedLandmark], in viewSize: CGSize) -> CGRect? {
        guard !landmarks.isEmpty else { return nil }
        
        var minX: CGFloat = 1.0
        var minY: CGFloat = 1.0
        var maxX: CGFloat = 0.0
        var maxY: CGFloat = 0.0
        
        for landmark in landmarks {
            let x = CGFloat(landmark.x)
            let y = CGFloat(landmark.y)
            
            minX = min(minX, x)
            minY = min(minY, y)
            maxX = max(maxX, x)
            maxY = max(maxY, y)
        }
        
        let left = minX * viewSize.width
        let top = minY * viewSize.height
        let width = (maxX - minX) * viewSize.width
        let height = (maxY - minY) * viewSize.height
        
        return CGRect(x: left, y: top, width: width, height: height)
    }
    
    // Hi·ªÉn th·ªã alert y√™u c·∫ßu quy·ªÅn camera
 
}
